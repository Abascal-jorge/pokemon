{"version":3,"sources":["components/Header.js","components/Formulario/Listadopokemon.js","context/pokemonContext.js","components/Spinner.js","components/Formulario/Form.js","context/pokemonReducer.js","type/index.js","context/pokemonState.js","App.js","serviceWorker.js","index.js"],"names":["Header","Listadopokemon","resultado","forms","name","src","sprites","other","dream_world","front_default","alt","abilities","map","habilida","key","ability","pokemonContext","createContext","Spinner","className","Form","PokemonContext","useContext","error","spinner","obtenerNombre","errorDatos","useState","nombrep","pokemon","guardarpokemon","acciondatos","htmlFor","type","id","placeholder","onChange","e","target","value","toLowerCase","onClick","preventDefault","state","action","nombre","payload","data","PokemonState","props","useReducer","pokemonReducer","dispatch","a","useEffect","llamandoAPI","url","axios","get","datoobtenido","spinnerdatos","setTimeout","estado","Provider","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4ce42591.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\n\r\n\r\nconst Header = () => {\r\n    return ( \r\n        <Fragment>\r\n            <header>\r\n                <div>\r\n                    <h1>Hola pokemon</h1>\r\n                </div>\r\n            </header>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default Header;","import React, {Fragment} from 'react';\r\n\r\nconst Listadopokemon = (resultado) => {\r\n    //console.log(resultado.resultado.abilities[0]);\r\n\r\n    return ( \r\n        <Fragment>\r\n            <div>\r\n                <h1>{resultado.resultado.forms[0].name}</h1>\r\n                <img src={`${resultado.resultado.sprites.other.dream_world.front_default}`} alt=\"Girl in a jacket\" />\r\n                <h2>Habilidades</h2>\r\n                <ul>\r\n                    {\r\n                        resultado.resultado.abilities.map(habilida => (\r\n                            //<li>{habilida.ability}</li>\r\n                            <li\r\n                               key = {habilida.ability.name}\r\n                            >\r\n                                {habilida.ability.name}\r\n                            </li>\r\n                        ))  \r\n                    }\r\n                </ul>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default Listadopokemon;","import {createContext} from 'react';\r\n\r\nconst pokemonContext = createContext();\r\n\r\nexport default pokemonContext;","import React from 'react';\r\n\r\n\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div className=\"spinner\">\r\n            <div className=\"double-bounce1\"></div>\r\n            <div className=\"double-bounce2\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, { useContext, useState, Fragment } from 'react';\r\nimport Listadopokemon from \"./Listadopokemon\";\r\nimport pokemonContext from \"../../context/pokemonContext\";\r\nimport Spinner from \"../Spinner\";\r\n\r\nconst Form = () => {\r\n\r\n    const PokemonContext = useContext(pokemonContext);\r\n    const {resultado, error, spinner, obtenerNombre, errorDatos} = PokemonContext;\r\n\r\n    //Crewando state para guatrdar el nombre del pokemon\r\n    const [pokemon, guardarpokemon] = useState({\r\n        nombrep : \"\"\r\n    });\r\n    const {nombrep} = pokemon;\r\n\r\n    //Funcion text box guardar nombre \r\n    const onChange = (e) => {\r\n        guardarpokemon({\r\n            ...pokemon,\r\n            [e.target.name] : e.target.value.toLowerCase()\r\n        });   \r\n    }\r\n\r\n    //funcion boton\r\n    const onConsultar  = (e) =>{\r\n        e.preventDefault();\r\n        //Validar Formulario\r\n        if(nombrep === \"\"){\r\n            errorDatos();\r\n            return;\r\n        }\r\n        obtenerNombre(pokemon);\r\n    }\r\n\r\n    //Cargando pokemon\r\n    const acciondatos = spinner ? <Spinner/> : <Listadopokemon resultado = {resultado}/>;\r\n\r\n    return ( \r\n        <Fragment>\r\n        <form>\r\n            {error? <p>Los campos son Obligatorios</p>: null}\r\n            <div>\r\n                <label htmlFor=\"nombrep\">Ingresa el pokemon a buscar</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"nombrep\"\r\n                    name =\"nombrep\"\r\n                    placeholder=\"Escribe Tu Nombre\"\r\n                    onChange={onChange}\r\n                    value={nombrep}\r\n                />\r\n                 <button\r\n                    onClick={onConsultar}\r\n                >Consultar\r\n        </button>\r\n            </div>\r\n            {resultado? \r\n                acciondatos\r\n            :\r\n             null\r\n            }\r\n        </form>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default Form;","import {DATOS_API, OBTENER_NOMBRE, ERROR_DATOS, SPINNER_DATOS} from \"../type\";\r\n\r\n\r\nexport default (state, action) => {\r\n    switch (action.type) {\r\n        case OBTENER_NOMBRE:\r\n            return{\r\n                ...state,\r\n                nombre : action.payload.nombrep\r\n            }\r\n        case DATOS_API:\r\n            return{\r\n                ...state,\r\n                resultado: action.payload.data\r\n            }\r\n        case ERROR_DATOS:\r\n            return{\r\n                ...state,\r\n                error:  action.payload\r\n            }\r\n        case SPINNER_DATOS:\r\n            return{\r\n                ...state,\r\n                spinner: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","export const OBTENER_NOMBRE = \"OBTENER_NOMBRE\";\r\nexport const DATOS_API = \"DATOS_API\";\r\nexport const ERROR_DATOS = \"ERROR_DATOS\";\r\nexport const SPINNER_DATOS = \"SPINNER_DATOS\";","import React, { useReducer, useEffect } from 'react';\r\nimport pokemonContext from \"./pokemonContext\";\r\nimport pokemonReducer from \"./pokemonReducer\";\r\nimport axios from \"axios\";\r\nimport {OBTENER_NOMBRE,\r\n        DATOS_API,\r\n        ERROR_DATOS,\r\n        SPINNER_DATOS} from \"../type\";\r\n\r\nconst PokemonState = (props) => {\r\n\r\n    const initialstate = {\r\n        nombre: null,\r\n        resultado: null,\r\n        error: false,\r\n        spinner: false\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(pokemonReducer, initialstate);\r\n\r\n    const obtenerNombre = async nombre => {\r\n        dispatch({\r\n            type: OBTENER_NOMBRE,\r\n            payload: nombre\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (state.nombre === null) return;\r\n        const llamandoAPI = async () => {\r\n            const url = `https://pokeapi.co/api/v2/pokemon/${state.nombre}/`;\r\n    \r\n            const datoobtenido = await axios.get(url);\r\n            dispatch({\r\n                type: DATOS_API,\r\n                payload: datoobtenido\r\n            });\r\n        }\r\n        spinnerdatos(true);\r\n        setTimeout(() => {\r\n            spinnerdatos(false);\r\n        }, 3000);\r\n        llamandoAPI();\r\n    }, [state.nombre]);\r\n\r\n    //VACIAR DATOS API\r\n    const errorDatos = ()=>{\r\n\r\n        dispatch({\r\n            type: ERROR_DATOS,\r\n            payload: true\r\n        });\r\n\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: ERROR_DATOS,\r\n                payload: false\r\n            });\r\n        }, 5000);\r\n    }\r\n    //Activar spinner \r\n    const spinnerdatos = (estado) =>{\r\n        dispatch({\r\n            type: SPINNER_DATOS,\r\n            payload: estado\r\n        });\r\n    }\r\n\r\n    return ( \r\n        <pokemonContext.Provider\r\n            value={{\r\n                resultado: state.resultado,\r\n                error: state.error,\r\n                spinner: state.spinner,\r\n                obtenerNombre,\r\n                errorDatos\r\n            }}\r\n        >\r\n            {props.children}\r\n        </pokemonContext.Provider>\r\n     );\r\n}\r\n \r\nexport default PokemonState;","import React from 'react';\r\nimport Header from \"./components/Header\";\r\nimport Form from \"./components/Formulario/Form\";\r\nimport PokemonState from \"./context/pokemonState\";\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n      <PokemonState>\r\n        <Header/>\r\n        <Form/>\r\n      </PokemonState>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}